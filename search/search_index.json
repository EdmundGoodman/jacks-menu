{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Introduction","text":"<p>A tool to scrape the Jack\u2019s Gelato menu. Automatically deployed to https://edmundgoodman.co.uk/gelato/.</p> <p>All menu information is property of Jack\u2019s Gelato. See my blog post for why I made this tool.</p>"},{"location":"contributing.html","title":"Contributing","text":"<p>This project is open for contributions! You can do this by making a pull request.</p>"},{"location":"getting_started.html","title":"Getting started","text":"<p>The tool can be installed with your python package manager of choice, for example with <code>uv</code>:</p> <pre><code>uv tool install jacks-menu\n</code></pre> <p>Then, to view the current menu at Jack\u2019s Gelato, run:</p> <pre><code>jacks-menu\n</code></pre>"},{"location":"implementation.html","title":"Implementation","text":"<p>Please read this blog post for more details about the implementation.</p>"},{"location":"reference/main.html","title":"Reference","text":""},{"location":"reference/main.html#jacks_menu.main","title":"<code>main(raw: str | None, markdown: str | None, retrieve_doc_id: bool, fail_on_error: bool, verbose: bool) -&gt; None</code>","text":"<p>A script to scrape the Jack\u2019s Gelato menu website.</p> Source code in <code>src/jacks_menu/__init__.py</code> <pre><code>@click.command()\n@click.option(\n    \"-r\",\n    \"--raw\",\n    type=click.Path(dir_okay=True),\n    default=None,\n    help=\"The directory to output the raw menu file to, if unset it is discarded.\",\n)\n@click.option(\n    \"-m\",\n    \"--markdown\",\n    type=click.Path(dir_okay=True),\n    default=None,\n    help=\"The directory to output the generated markdown menus to, if unset it is only printed.\",\n)\n@click.option(\n    \"-d\",\n    \"--retrieve-doc-id\",\n    is_flag=True,\n    default=False,\n    help=\"Retrieve (slowly...) the Jack's Gelato menu doc ID with selenium.\",\n)\n@click.option(\n    \"-e\",\n    \"--fail-on-error\",\n    is_flag=True,\n    default=False,\n    help=\"Abort and give a non-zero exit code if an error occurs.\",\n)\n@click.option(\n    \"-v\",\n    \"--verbose\",\n    is_flag=True,\n    default=False,\n    help=\"Show verbose output about downloading the menu.\",\n)\n@click.version_option(VERSION)\ndef main(\n    raw: str | None,\n    markdown: str | None,\n    retrieve_doc_id: bool,\n    fail_on_error: bool,\n    verbose: bool,\n) -&gt; None:\n    \"\"\"A script to scrape the Jack's Gelato menu website.\"\"\"\n    run(\n        raw_directory=Path(raw) if raw else None,\n        markdown_directory=Path(markdown) if markdown else None,\n        retrieve_doc_id=retrieve_doc_id,\n        fail_on_error=fail_on_error,\n        verbose=verbose,\n    )\n</code></pre>"},{"location":"reference/main.html#jacks_menu.run","title":"<code>run(raw_directory: Path | None, markdown_directory: Path | None, retrieve_doc_id: bool = False, fail_on_error: bool = False, verbose: bool = False) -&gt; None</code>","text":"<p>Run the tool.</p> Source code in <code>src/jacks_menu/__init__.py</code> <pre><code>def run(\n    raw_directory: Path | None,\n    markdown_directory: Path | None,\n    retrieve_doc_id: bool = False,\n    fail_on_error: bool = False,\n    verbose: bool = False,\n) -&gt; None:\n    \"\"\"Run the tool.\"\"\"\n    menus_markdown: dict[str, str] = {}\n\n    for location, web in MENU_LOCATIONS.items():\n        raw_file = (\n            None\n            if raw_directory is None\n            else raw_directory / f\"{DATE}__{LOCATIONS_SANITISED[location]}.txt\"\n        )\n\n        doc_id = MENU_KNOWN_IDS[location]\n        if retrieve_doc_id:\n            doc_id = get_iframe_doc_id(web, expected_doc_id=doc_id, verbose=verbose)\n\n        try:\n            menu_text = get_menu_text(\n                doc_id,\n                output_file=raw_file,\n                verbose=verbose,\n            )\n            menu = parse_menu(location, web, menu_text)\n            menu_markdown = get_menu_markdown(menu)\n        except (MenuRetrievalError, MenuParseError, MismatchedDocIdError) as err:\n            if fail_on_error:\n                raise err  # noqa: TRY201\n            menu_markdown = get_error_markdown(location, web)\n\n        menus_markdown[location] = menu_markdown\n\n    blog_markdown = get_blog_markdown(menus_markdown)\n    print(blog_markdown)\n    if markdown_directory:\n        markdown_file = markdown_directory / f\"{DATE}.md\"\n        with markdown_file.open(\"w+\") as markdown_handle:\n            markdown_handle.write(blog_markdown)\n</code></pre>"},{"location":"reference/main.html#jacks_menu.website","title":"<code>website</code>","text":"<p>.</p>"},{"location":"reference/main.html#jacks_menu.website.MenuRetrievalError","title":"<code>MenuRetrievalError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Custom error for the menu retrieval operation failing.</p> Source code in <code>src/jacks_menu/website.py</code> <pre><code>class MenuRetrievalError(Exception):\n    \"\"\"Custom error for the menu retrieval operation failing.\"\"\"\n</code></pre>"},{"location":"reference/main.html#jacks_menu.website.MismatchedDocIdError","title":"<code>MismatchedDocIdError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Custom error for mismatched doc ids.</p> Source code in <code>src/jacks_menu/website.py</code> <pre><code>class MismatchedDocIdError(Exception):\n    \"\"\"Custom error for mismatched doc ids.\"\"\"\n</code></pre>"},{"location":"reference/main.html#jacks_menu.website.headless_firefox_driver","title":"<code>headless_firefox_driver() -&gt; Generator[webdriver.Firefox, None, None]</code>","text":"<p>Context manager for a headless firefox driver.</p> Source code in <code>src/jacks_menu/website.py</code> <pre><code>@contextmanager\ndef headless_firefox_driver() -&gt; Generator[webdriver.Firefox, None, None]:  # type: ignore[no-any-unimported]\n    \"\"\"Context manager for a headless firefox driver.\"\"\"\n    options = FirefoxOptions()\n    options.add_argument(\"--headless\")\n    driver = webdriver.Firefox(options=options)\n    try:\n        yield driver\n    finally:\n        driver.quit()\n</code></pre>"},{"location":"reference/main.html#jacks_menu.website.get_iframe_doc_id","title":"<code>get_iframe_doc_id(url: str, expected_doc_id: str | None, verbose: bool = False) -&gt; str</code>","text":"<p>Get the Google doc id for a Jack\u2019s Gelato menu iFrame.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the menu webpage to get the doc url id from.</p> required <code>expected_doc_id</code> <code>str | None</code> <p>The expected doc id to check against.</p> required <code>verbose</code> <code>bool</code> <p>Whether to show information about the retrieval process.</p> <code>False</code> <p>Raises:</p> Type Description <code>MenuRetrievalError</code> <p>The menu Google doc it retrieval failed.</p> <p>Returns:</p> Type Description <code>str</code> <p>The Google doc url id.</p> Source code in <code>src/jacks_menu/website.py</code> <pre><code>def get_iframe_doc_id(\n    url: str, expected_doc_id: str | None, verbose: bool = False\n) -&gt; str:\n    \"\"\"Get the Google doc id for a Jack's Gelato menu iFrame.\n\n    Args:\n        url: The URL of the menu webpage to get the doc url id from.\n        expected_doc_id: The expected doc id to check against.\n        verbose: Whether to show information about the retrieval process.\n\n    Raises:\n        MenuRetrievalError: The menu Google doc it retrieval failed.\n\n    Returns:\n        The Google doc url id.\n    \"\"\"\n    with headless_firefox_driver() as driver:\n        driver.get(url)\n\n        # Because the wix google doc embedding is very silly, we need an\n        # unconditional wait for &gt;5 seconds, hence the `sleep(10)`\n        driver.implicitly_wait(10)\n        sleep(15)\n\n        for request in driver.requests:\n            if request.response:\n                match = re_match(GOOGLE_DOC_PATTERN, request.url)\n                if match and (doc_id := match.group(1)) != WIX_DOC_ID:\n                    if verbose:\n                        print(f\"Retrieved doc id: {doc_id}\")\n                    if expected_doc_id and doc_id != expected_doc_id:\n                        raise MismatchedDocIdError(\n                            \"Mismatched doc id!\"\n                            f\" Expected '{expected_doc_id}', got '{doc_id}'\"\n                        )\n                    return doc_id\n\n    raise MenuRetrievalError(\"Failed to retrieve menu Google doc id!\")\n</code></pre>"},{"location":"reference/main.html#jacks_menu.website.get_menu_text","title":"<code>get_menu_text(doc_id: str, output_file: Path | None = None, verbose: bool = False) -&gt; str</code>","text":"<p>Get the text content of menu given its Google doc id.</p> <p>Parameters:</p> Name Type Description Default <code>doc_id</code> <code>str</code> <p>The Google doc id to get the text content from.</p> required <code>output_file</code> <code>Path | None</code> <p>The output file to write the text content to, if set.</p> <code>None</code> <code>verbose</code> <code>bool</code> <p>Whether to show information about the download process.</p> <code>False</code> <p>Raises:</p> Type Description <code>MenuRetrievalError</code> <p>The menu text retrieval failed.</p> <p>Returns:</p> Type Description <code>str</code> <p>The text content of menu given its Google doc id.</p> Source code in <code>src/jacks_menu/website.py</code> <pre><code>def get_menu_text(\n    doc_id: str, output_file: Path | None = None, verbose: bool = False\n) -&gt; str:\n    \"\"\"Get the text content of menu given its Google doc id.\n\n    Args:\n        doc_id: The Google doc id to get the text content from.\n        output_file: The output file to write the text content to, if set.\n        verbose: Whether to show information about the download process.\n\n    Raises:\n        MenuRetrievalError: The menu text retrieval failed.\n\n    Returns:\n        The text content of menu given its Google doc id.\n    \"\"\"\n    if output_file is not None and output_file.exists():\n        if verbose:\n            print(f\"Output file '{output_file}' already exists.\")\n        return output_file.read_text()\n\n    url = f\"https://docs.google.com/uc?id={doc_id}\"\n    with NamedTemporaryFile() as tmp_handle:\n        try:\n            gdown.download(url, tmp_handle.name, format=\"txt\", quiet=not verbose)\n        except gdown.exceptions.FileURLRetrievalError as exc:\n            raise MenuRetrievalError(\"Failed to retrieve menu text!\") from exc\n        menu_text = Path(tmp_handle.name).read_text()\n\n    if output_file is not None:\n        with output_file.open(\"w+\") as output_handle:\n            output_handle.write(menu_text)\n\n    return menu_text\n</code></pre>"},{"location":"reference/main.html#jacks_menu.menu","title":"<code>menu</code>","text":"<p>.</p>"},{"location":"reference/main.html#jacks_menu.menu.Menu","title":"<code>Menu</code>  <code>dataclass</code>","text":"<p>Dataclass containing the menu date and items.</p> Source code in <code>src/jacks_menu/menu.py</code> <pre><code>@dataclass\nclass Menu:\n    \"\"\"Dataclass containing the menu date and items.\"\"\"\n\n    location: str\n    web: str\n    date: str\n    items: list[str]\n</code></pre>"},{"location":"reference/main.html#jacks_menu.parser","title":"<code>parser</code>","text":"<p>.</p>"},{"location":"reference/main.html#jacks_menu.parser.MenuParseState","title":"<code>MenuParseState</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Enum containing parser states for the menu.</p> Source code in <code>src/jacks_menu/parser.py</code> <pre><code>class MenuParseState(Enum):\n    \"\"\"Enum containing parser states for the menu.\"\"\"\n\n    Date = auto()\n    Items = auto()\n    Done = auto()\n</code></pre>"},{"location":"reference/main.html#jacks_menu.parser.MenuParseError","title":"<code>MenuParseError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Custom error for parsing logic failing on the menu data.</p> Source code in <code>src/jacks_menu/parser.py</code> <pre><code>class MenuParseError(Exception):\n    \"\"\"Custom error for parsing logic failing on the menu data.\"\"\"\n</code></pre>"},{"location":"reference/main.html#jacks_menu.parser.parse_menu","title":"<code>parse_menu(location: str, web: str, menu_text: str) -&gt; Menu</code>","text":"<p>Parse the menu data.</p> <p>Parameters:</p> Name Type Description Default <code>location</code> <code>str</code> <p>The location of the menu.</p> required <code>web</code> <code>str</code> <p>The web address of the menu.</p> required <code>menu_text</code> <code>str</code> <p>The menu text to parse.</p> required <p>Returns:</p> Type Description <code>Menu</code> <p>The parsed menu.</p> Source code in <code>src/jacks_menu/parser.py</code> <pre><code>def parse_menu(location: str, web: str, menu_text: str) -&gt; Menu:\n    \"\"\"Parse the menu data.\n\n    Args:\n        location: The location of the menu.\n        web: The web address of the menu.\n        menu_text: The menu text to parse.\n\n    Returns:\n        The parsed menu.\n    \"\"\"\n    lines = [line.strip() for line in menu_text.splitlines()]\n\n    date: str | None = None\n    items: list[str] = []\n    menu_parse_state = MenuParseState.Date\n\n    for line in lines:\n        if menu_parse_state == MenuParseState.Date:\n            # Last non-empty line before dash is the date\n            if line == \"-\":\n                menu_parse_state = MenuParseState.Items\n            elif line:\n                date = line\n        elif menu_parse_state == MenuParseState.Items:\n            # All non-empty lines before \"Single scoop\" are items\n            if line.startswith(\"Single Scoop\"):\n                menu_parse_state = MenuParseState.Done\n                break\n            if line:\n                items.append(line)\n\n    if menu_parse_state != MenuParseState.Done:\n        raise MenuParseError(\"Could not parse menu!\")\n    assert date is not None\n    return Menu(location, web, date, items)\n</code></pre>"},{"location":"reference/main.html#jacks_menu.export","title":"<code>export</code>","text":"<p>.</p>"},{"location":"reference/main.html#jacks_menu.export.markdown_wrap_contents","title":"<code>markdown_wrap_contents(location: str, web: str, date: str, contents: str) -&gt; str</code>","text":"<p>Wrap the markdown contents with a subheading.</p> <p>Parameters:</p> Name Type Description Default <code>location</code> <code>str</code> <p>The location of the menu.</p> required <code>web</code> <code>str</code> <p>The link back to the real menu site.</p> required <code>date</code> <code>str</code> <p>The date of the menu.</p> required <code>contents</code> <code>str</code> <p>The contents of the menu text (items or error message).</p> required <p>Returns:</p> Type Description <code>str</code> <p>A markdown representation of the menu data.</p> Source code in <code>src/jacks_menu/export.py</code> <pre><code>def markdown_wrap_contents(location: str, web: str, date: str, contents: str) -&gt; str:\n    \"\"\"Wrap the markdown contents with a subheading.\n\n    Args:\n        location: The location of the menu.\n        web: The link back to the real menu site.\n        date: The date of the menu.\n        contents: The contents of the menu text (items or error message).\n\n    Returns:\n        A markdown representation of the menu data.\n    \"\"\"\n    return f\"## [{location}]({web}) ({date})\\n\\n{contents}\\n\\n\"\n</code></pre>"},{"location":"reference/main.html#jacks_menu.export.get_menu_markdown","title":"<code>get_menu_markdown(menu: Menu) -&gt; str</code>","text":"<p>Get a markdown representation of the menu.</p> Source code in <code>src/jacks_menu/export.py</code> <pre><code>def get_menu_markdown(menu: Menu) -&gt; str:\n    \"\"\"Get a markdown representation of the menu.\"\"\"\n    return markdown_wrap_contents(\n        menu.location,\n        menu.web,\n        menu.date,\n        \"\\n\".join(f\"- {item}\" for item in menu.items),\n    )\n</code></pre>"},{"location":"reference/main.html#jacks_menu.export.get_error_markdown","title":"<code>get_error_markdown(location: str, web: str) -&gt; str</code>","text":"<p>Get a markdown representation of the error.</p> Source code in <code>src/jacks_menu/export.py</code> <pre><code>def get_error_markdown(location: str, web: str) -&gt; str:\n    \"\"\"Get a markdown representation of the error.\"\"\"\n    return markdown_wrap_contents(location, web, DATE, ERROR_MESSAGE)\n</code></pre>"},{"location":"reference/main.html#jacks_menu.export.get_blog_markdown","title":"<code>get_blog_markdown(menus_markdown: dict[str, str]) -&gt; str</code>","text":"<p>Get the markdown for the blog containing all menus.</p> Source code in <code>src/jacks_menu/export.py</code> <pre><code>def get_blog_markdown(menus_markdown: dict[str, str]) -&gt; str:\n    \"\"\"Get the markdown for the blog containing all menus.\"\"\"\n    joined_menus_markdown = \"\\n\".join(menus_markdown.values())\n    return f\"{HEADER}{joined_menus_markdown}{FOOTER}\"\n</code></pre>"},{"location":"reference/main.html#jacks_menu.constants","title":"<code>constants</code>","text":"<p>.</p>"}]}